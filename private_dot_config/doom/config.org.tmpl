* Meta
Not sure what this is for, adding it just in case

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Config
** User/machine specific config

#+begin_src elisp
(setq user-full-name "Alpha Shuro"
      user-mail-address "{{ .email }}")
#+end_src

** Editor setup

#+begin_src elisp
(setq doom-font (font-spec :family "Monaspace Krypton" :size 13)
      doom-variable-pitch-font (font-spec :family "Monaspace Krypton Var" :size 14))
(setq doom-theme 'doom-one)
(setq display-line-numbers-type t) ; `t' | `nil' | `relative'

(setq-default tab-width 2
              indent-tabs-mode nil)
(setq indent-line-function 'insert-tab)

(global-auto-revert-mode 1) ;; auto-reload changed files
#+end_src

** Apparently doom is not compatible with fish, I need to set it to use a POSIX shell

#+begin_src elisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
(setq-default explicit-shell-file-name (executable-find "fish"))
#+end_src

* Specific packages config
** Org

PS; to use time as file name: (concat (format-time-string "%Y-%m-%d") ".org")

#+begin_src elisp
(setq org-directory "~/org")

(after! org
  (require 'org-indent)
  (org-indent-mode -1)
  (setq org-hide-leading-stars nil

        ; create org id when copying link via `org-store-link`
        ; org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id

        org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d)" "CANCELLED(c@/!)")
                            (sequence "IDEA(i!)" "SOMEDAY(s)" "NEXT(n)" "PROJ(p!)" "|" "DONE(d)" "CANCELLED(c@/!)")
                            (sequence "TOREAD(r)" "READING(e)" "|" "READ(d)"))

        org-log-done 'time
        org-log-note-clock-out t

        org-refile-allow-creating-parent-nodes 'confirm

        org-return-follows-link t

        org-agenda-files '("journal.org"
                           "areas.org"
                           "inbox.org")
        ; org-agenda-start-on-weekday 1
        org-agenda-start-day "."
        org-agenda-span 1
        org-agenda-start-with-log-mode t
        org-agenda-start-with-clock-report-mode nil
        org-agenda-default-appointment-duration 25
        org-agenda-show-future-repeats nil
        org-agenda-todo-ignore-scheduled t
        org-agenda-todo-ignore-deadlines t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-time-leading-zero t
        org-agenda-time-grid '((daily today remove-match)
                               (930
                                1000
                                1030
                                1100
                                1130
                                1200
                                1230
                                1300
                                1330
                                1400
                                1430
                                1500
                                1530
                                1600
                                1630
                                1700
                                1730)
                               "......" "----------------")

        org-capture-templates '(("t" "Todo"
                                entry (file "inbox.org")
                                "* TODO %?\nSCHEDULED: %t\nCREATED: %U")

                                ("n" "Note"
                                entry (file+olp+datetree "journal.org")
                                "* %<%R> %?\n"
                                :tree-type week)

                                ("e" "Event in journal"
                                entry (file+olp+datetree "journal.org")
                                "* %?\n%T"
                                :tree-type week :time-prompt t)

                                ("j" "Journal entry"
                                entry (file+olp+datetree "journal.org")
                                "* %?\n%T"
                                :tree-type week
                                :empty-lines 1)

                                ("T" "Thought"
                                entry (file "thoughts.org")
                                "* %U\n%i%?"
                                :empty-lines 1))))

(setq org-agenda-custom-commands
      '(("cp" "Projects"
         ((org-ql-block '((todo "PROJ"))
                        ((org-ql-block-header "Projects")))
          (agenda)))))
#+end_src

** Org roam

#+begin_src elisp
(after! org-roam
  (setq org-roam-directory org-directory
        org-roam-dailies-directory "journals/"
        org-roam-capture-templates
          '(("d" "default" plain
             "%?"
             :target (file+head "pages/${slug}.org" "#+title: ${title}\n")
             :unnarrowed t)))
  ;; (org-roam-db-autosync-mode)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer))))
#+end_src

** dired
An attempt to make dired more like [[http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/][`oil.nvim' and `vinegar.vim`]]

#+begin_src elisp
(add-hook! dired-mode
        ;; Compress/Uncompress tar files
        (auto-compression-mode t)

        ;; Auto refresh buffers
        (global-auto-revert-mode t)

        ;; Also auto refresh dired, but be quiet about it
        (setq global-auto-revert-non-file-buffers t)
        (setq auto-revert-verbose nil)

        ;; Emulate vinegar.vim
        (setq dired-omit-verbose nil)
        (setq dired-hide-details-hide-symlink-targets nil)
        (make-local-variable 'dired-hide-symlink-targets)
        (dired-hide-details-mode t))

(map! :n "-" #'dired-jump)
#+end_src

** evil

#+begin_src elisp
(after! evil
  (setq evil-shift-width 2
        evil-split-window-below t
        evil-vsplit-window-right t))
#+end_src

** org-super-links

#+begin_src elisp
(use-package org-super-links
  :defer
  :bind (("C-c s s" . org-super-links-link)
         ("C-c s l" . org-super-links-store-link)
         ("C-c s C-l" . org-super-links-insert-link)))
#+end_src

** which-key

#+begin_src elisp
(after! which-key
  (setq which-key-use-C-h-commands t))
#+end_src

** forge

#+begin_src elisp
(after! magit
  (require 'forge)
  (setq auth-sources '("~/.authinfo.gpg")))
#+end_src

** elfeed

#+begin_src elisp
(after! elfeed
  (setq rmh-elfeed-org-files (list (file-name-concat org-directory "elfeed.org"))))
#+end_src

* Notes

** Keybindings
- Guide on rebinding keys: https://discourse.doomemacs.org/t/how-to-re-bind-keys/56

** Configuring packages
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.
  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

use `K' on anything to check docs
use `C-h o' to look up a symbol (functions, variables, faces, etc
